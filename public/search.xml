<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java</title>
      <link href="/2019/07/15/Java%E7%BA%BF%E7%A8%8B/"/>
      <url>/2019/07/15/Java%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="一-Java-线程基础"><a href="#一-Java-线程基础" class="headerlink" title="一. Java 线程基础"></a>一. Java 线程基础</h2><h3 id="1-Thread"><a href="#1-Thread" class="headerlink" title="1. Thread"></a>1. Thread</h3><p><strong>属性</strong></p><ul><li>编号</li><li>名称</li><li>类别：守护线程、用户线程</li><li>优先级</li></ul><p><strong>常用方法</strong></p><ul><li>strat ( )</li><li>run ( )</li><li>join ( )</li><li>currentThread ( )</li><li>sheep ( long mills )</li><li>yield ( )</li></ul><h3 id="2-任务"><a href="#2-任务" class="headerlink" title="2. 任务"></a>2. 任务</h3><ul><li>特定的线程总是在执行特定的任务</li><li>线程的 run 方法是线程任务处理逻辑的入口方法，由 java 虚拟机自行调用</li></ul><h3 id="3-创建线程的方法"><a href="#3-创建线程的方法" class="headerlink" title="3. 创建线程的方法"></a>3. 创建线程的方法</h3><ol><li><p>创建 Thread 的子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Class MyThread extend Thread&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Thread thread = <span class="keyword">new</span> MyThread();</span><br></pre></td></tr></table></figure></li><li><p>以 Runnable 接口实例为构造器参数创建 Thread 实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Class MyRunnable implements Runnable&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run()&#123;</span><br><span class="line">        System.out.println(&quot;Hello World!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Thread thread = new Thread(new MyRunnable);</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-线程的状态"><a href="#4-线程的状态" class="headerlink" title="4. 线程的状态"></a>4. 线程的状态</h3><ol><li>新建而未运行: NEW</li><li>可被调度运行或正在运行: RUNNABLE：ready 、running</li><li>阻塞: BLOCKED</li><li>等待：WAITING 、TIME_WAITING</li></ol><h3 id="5-多线程的优势和风险"><a href="#5-多线程的优势和风险" class="headerlink" title="5. 多线程的优势和风险"></a>5. 多线程的优势和风险</h3><p><em>优势</em></p><ul><li>提高系统的吞吐率</li><li>提高响应性 ( GUI )</li><li>充分利用多核处理器资源</li><li>最小化对系统资源的使用(相比于多进程)</li><li>简化程序的结构</li></ul><p><em>风险</em></p><ul><li>线程安全</li><li>线程活性问题（死锁）</li><li>上下文切换</li><li>可靠性</li></ul><h2 id="二-多线程存在的问题"><a href="#二-多线程存在的问题" class="headerlink" title="二. 多线程存在的问题"></a>二. 多线程存在的问题</h2><h3 id="1-竞态"><a href="#1-竞态" class="headerlink" title="1. 竞态"></a>1. 竞态</h3><p>计算的正确性依赖于相对时间顺序或线程的交错顺序。<strong>同一组共享变量的多个线程所执行的操作相互交错而导致的干扰或者冲突的结果</strong>（读脏数据，丢失更新），保证操作的原子性可以消除竞态。</p><p>常见的竞态模式：<strong>read-modify-write</strong> , <strong>check-then-atc</strong></p><h3 id="2-线程安全"><a href="#2-线程安全" class="headerlink" title="2. 线程安全"></a>2. 线程安全</h3><ol><li><p><strong>原子性</strong>：原子操作不可被分解。对 <strong>long/double</strong> (64位的变量类型在32位上环境上操作)型外以的任何变量的写都是原子的，<strong>volatile</strong> 能够保障变量写操作的原子性。</p></li><li><p><strong>可见性</strong>：一个线程对一个变共享量进行更新后，其它线程可能无法及时获取最新值或永远无法获取这就是线程的可见性问题。</p><ul><li><p>软件问题：JIT 编译器对代码进行优化导致不可见，如循环不变表达式外提。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//循环不变表达式外提,其它线程对 toCancel 更新不可见</span></span><br><span class="line"><span class="keyword">while</span> (!toCancel)&#123;</span><br><span class="line">    doSomething..</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!toCancel)&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">        doSomething..</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>硬件问题：程序中的变量可能分配到各处理器的寄存器或者高速缓冲器中，而不是主内存中，可能导致其它线程不可见，可以通过<strong>缓存同步</strong>解决（写：<strong>冲刷处理器缓存</strong>，读：<strong>刷新处理器缓存</strong>)。</p></li></ul></li><li><p><strong>有序性</strong>：存在数据依赖的指令不会被重排序（写后读，读后写，写后写),存在控制依赖的可被重排序（ if ),重排序的发生是出于性能需要，可能会导致线程安全，可见性是有序性的基础。</p><ul><li><strong>指令重排序</strong>：编译器、JIT 编译器、处理器</li><li><strong>内存重排序</strong>：存储系统</li></ul></li></ol><h3 id="3-上下文切换"><a href="#3-上下文切换" class="headerlink" title="3. 上下文切换"></a>3. 上下文切换</h3><p>上下文切换是多线程编程的线程调度切换的产物，会导致额外的系统开销，因此多线程未必比单线程省时。</p><ul><li><p>自发性上下文切换</p><p>Thread.sleep ( ) , Object.wait ( ) , Thread.yield ( ) , Thread.join ( ) , LokSupport.park ( ) , 阻塞式 I / O </p></li><li><p>非自发性上下文切换</p><p>时间片用完 ， 垃圾回收</p></li></ul><h2 id="Java-线程同步机制"><a href="#Java-线程同步机制" class="headerlink" title="Java 线程同步机制"></a>Java 线程同步机制</h2><h3 id="1-锁"><a href="#1-锁" class="headerlink" title="1. 锁"></a>1. 锁</h3><h4 id="1-锁的基本概念"><a href="#1-锁的基本概念" class="headerlink" title="1.锁的基本概念"></a>1.锁的基本概念</h4><p>锁具有<strong>排他性</strong>，一个锁只能被一个线程持有，分为<strong>内部锁</strong>和<strong>显式锁</strong>。 </p><p><img src="E:\我的坚果云\Java并发\assets\G6TOG5OE2U1KTFQ721NMTC.png" alt="img"></p><p>​                                                    互斥锁示意图</p><p><strong>锁的作用：</strong></p><ul><li>锁的互斥性能够保障原子性。</li><li>获得锁时进行刷新处理器缓存，释放锁时进行冲刷处理器缓存，从而保障了可见性。</li><li>锁对原子性和可见性的保障从而使得有序性得到保障。</li></ul><p><strong>锁的可重入性</strong>：一个线程在持有该锁的时候还能再次申请改锁（无需竞争）。可重入锁的实现原理是通过一个<em>计数器</em>，每申请一层锁计数器就加1，释放一层锁计数器就减1。</p><p><strong>锁的粒度</strong>：一个锁实例所保护的<strong>共享数据的数量大小</strong>称为锁的粒度。锁的粒度过<strong>粗</strong>会造成申请锁时不必要的等待；锁的粒度过<strong>细</strong>会增加锁调度的开销。</p><h4 id="2-内部锁与显示锁"><a href="#2-内部锁与显示锁" class="headerlink" title="2.内部锁与显示锁"></a>2.内部锁与显示锁</h4><blockquote><p>内部锁：synchronized 关键字</p></blockquote><p>Java 中任何一个对象都有一个与之关联的锁，称为<strong>内部锁</strong>或<strong>监视锁</strong>，通过 <strong>synchronized</strong> 关键字实现。</p><p>synchronized 可以用来修饰方法和代码块。</p><p><strong>同步方法</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//同步方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//同步静态方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>同步代码块</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//synchronized (锁句柄)，锁句柄是一个对象的引用，锁句柄对应的监视器为同步块的引导锁</span></span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</span><br><span class="line">            <span class="comment">//同步块</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">synchronized</span>(Demo.class)&#123;</span><br><span class="line">            <span class="comment">//静态同步块</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>内部锁的调度机制</strong>：Java 虚拟机为每个内部锁分配一个<strong>入口集</strong>。</p><p><img src="E:\我的坚果云\Java并发\assets\1550942029107.png" alt="1550942029107"></p><p>​                                            内部锁的调度示意图</p><blockquote><p>显示锁：Lock 接口</p></blockquote><p>显示锁是 <strong>Lock</strong> 接口的实例，<strong>ReentrantLock</strong> 是 Lock 接口的默认实现类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">lock.lock(); <span class="comment">// 申请锁 lock</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">// 临界区</span></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="comment">// 总是在 finally 块中释放锁,避免锁泄露</span></span><br><span class="line">    lock.unlock(); <span class="comment">// 释放锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>内部锁（简单易用）与显示锁（功能强大）的比较</p></blockquote><ol><li>显示锁比内部锁更具有灵活性，支持在一个方法中申请锁，另一个方法中释放。</li><li>内部锁比显示锁简单易用，内部锁不会发生锁泄露，而显示锁会，因此释放操作需放 finally 块中。</li><li>在锁的调度方面，内部锁仅支持非公平锁，可能导致饥饿，显示锁支持公平和非公平。</li><li>在问题定位方面，<strong>线程转储</strong>（相当于工作报告）包含内部锁的信息而不包含显示锁。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>start</title>
      <link href="/2019/07/15/start/"/>
      <url>/2019/07/15/start/</url>
      
        <content type="html"><![CDATA[<p>你好啊</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/04/16/hello-world/"/>
      <url>/2019/04/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//synchronized (锁句柄)，锁句柄是一个对象的引用，锁句柄对应的监视器为同步块的引导锁</span></span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</span><br><span class="line">            <span class="comment">//同步块</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">synchronized</span>(Demo.class)&#123;</span><br><span class="line">            <span class="comment">//静态同步块</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
